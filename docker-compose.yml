version: '3.8'  # Specify the version of Docker Compose

services:
  backend:
    image: veloce-backend
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "5018:5018"  # Expose this port for backend access
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=velocenetdb;Username=velocenetdb;Password=negator77;
      - Redis__Configuration=redis:6379  # Add Redis connection string
    depends_on:
      - postgres
      - redis  # Ensure Redis is started before the backend
    networks:
      - app-network

  frontend:
    image: veloce-frontend
    build:
      context: ./app
      dockerfile: Dockerfile
    volumes:
      - frontend_build:/frontend_build  # Use a volume to share the frontend build output
    networks:
      - app-network

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Use your custom Nginx configuration file
      - frontend_build:/usr/share/nginx/html  # Mount the shared volume for frontend output
    ports:
      - "80:80"  # Expose Nginx on port 80
    depends_on:
      - frontend  # Ensure frontend is built before Nginx starts
      - backend   # Ensure backend is ready
    networks:
      - app-network

  postgres:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_DB=velocenetdb
      - POSTGRES_USER=velocenetdb
      - POSTGRES_PASSWORD=negator77
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./velocenetdb.sql:/docker-entrypoint-initdb.d/velocenetdb.sql  # Mount your SQL dump
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "velocenetdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"  # Expose Redis port
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  frontend_build: